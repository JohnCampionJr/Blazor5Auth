@page "/secondary/register"
@inject ISecondaryAuthService AuthService
@inject NavigationManager NavigationManager

<TwHeader1>Secondary Register</TwHeader1>

@if (!string.IsNullOrEmpty(Error))
{
    <TwAlertError>
        @Error
    </TwAlertError>
}

<TwCard Title="Please enter your details" Class="lg:w-1/2">
    <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
        <FluentValidationValidator />
        <ServerValidator @ref="serverValidator" />
        <TwEditContextClasses />

        <TwInputText @bind-Value="@RegisterModel.Email"
                     ValidationFor="@(() => RegisterModel.Email)"
                     Label="Email Address"
                     type="email"
                     placeholder="you@example.com" />

        <TwInputText @bind-Value="@RegisterModel.Password"
                     ValidationFor="@(() => RegisterModel.Password)"
                     Label="Password"
                     type="password" />

        <TwInputText @bind-Value="@RegisterModel.ConfirmPassword"
                     ValidationFor="@(() => RegisterModel.ConfirmPassword)"
                     Label="Confirm Password"
                     type="password" />

        <TwButton>Submit</TwButton>
    </EditForm>
</TwCard>

@code
{
    private Features.Account.SecondaryRegister.Command RegisterModel = new();
    private ServerValidator serverValidator;
    private string Error = "";

    private async Task HandleRegistration()
    {
        RegisterModel.ReturnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        var result = await AuthService.Register(RegisterModel);

        if (result.IsSuccessful)
        {
            NavigationManager.NavigateTo("/account/registerconfirmation");
        }
        else
        {
            Error = result.Message;
            serverValidator.DisplayErrors(result.Errors);
        }
    }
}
