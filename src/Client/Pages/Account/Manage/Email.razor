@page "/account/manage/email"
@attribute [Authorize]
@using Features.Account.Manage
@inject HttpClient Http

<TwHeader2>Manage Email</TwHeader2>

@if (!string.IsNullOrEmpty(Success))
{
    <TwAlertSuccess>
        @Success
    </TwAlertSuccess>
}

<TwSubCard>
    <EditForm Model="Model">
        <FluentValidationValidator />
        <TwEditContextClasses />

        <div>
            <label class="block text-sm font-medium text-gray-700">Email</label>
            <div class="mt-1 relative rounded-md shadow-sm">
                <input disabled @bind="@EmailAddress" type="text" class="block w-full pr-10 sm:text-sm border-gray-300 rounded-md bg-gray-100">
                @if (IsEmailConfirmed)
                {
                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                    </div>
                }
            </div>
        </div>

        @if (!IsEmailConfirmed)
        {
            <a href="#" class="block my-2 text-blue-500" @onclick="SendVerificationEmail" @onclick:preventDefault>Send verification email.</a>
        }

        <TwInputText @bind-Value="@Model.NewEmail"
                     ValidationFor="@(() => Model.NewEmail)"
                     Label="New Email"
                     type="email" />

        <TwButton @onclick="SendChangeEmail">Change email</TwButton>
    </EditForm>
</TwSubCard>

@code
{
    private ChangeEmail.Command Model = new();
    private string Success { get; set; }
    private string EmailAddress { get; set; }
    private bool IsEmailConfirmed { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<UserProfile.Command>("api/account/manage/userprofile");
        EmailAddress = result.Email;
        IsEmailConfirmed = result.IsEmailConfirmed;
    }

    private async Task SendChangeEmail()
    {
        var response = await Http.PostAsJsonAsync("api/account/manage/changeemail", Model);
        var result = await response.Content.ReadFromJsonAsync<ChangeEmail.Result>();

        if (result.IsSuccessful)
        {
            Success = result.Message;
        }
    }

    private async Task SendVerificationEmail()
    {
        var response = await Http.PostAsJsonAsync("api/account/manage/sendemailconfirmation", new { });
        var result = await response.Content.ReadFromJsonAsync<ChangeEmail.Result>();

        if (result.IsSuccessful)
        {
            Success = result.Message;
        }
    }
}
