@page "/account/manage/changepassword"
@attribute [Authorize]
@inject HttpClient Http

<h4>Change Password</h4>
@if (!string.IsNullOrEmpty(Success))
{
    <div class="alert alert-success alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Success
    </div>
}
@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Error
    </div>
}
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Model" OnValidSubmit="SubmitChangePassword">
            <FluentValidationValidator />
            <ServerValidator @ref="_serverValidator" />
            <ValidationSummary />

            <div class="form-group">
                <label for="oldpassword">Old Password</label>
                <InputText Id="oldpassword" type="password" class="form-control" @bind-Value="Model.OldPassword"/>
                <ValidationMessage For="@(() => Model.OldPassword)"/>
            </div>
            <div class="form-group">
                <label for="newpassword">New Password</label>
                <InputText Id="newpassword" type="password" class="form-control" @bind-Value="Model.NewPassword"/>
                <ValidationMessage For="@(() => Model.NewPassword)"/>
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword"/>
                <ValidationMessage For="@(() => Model.ConfirmPassword)"/>
            </div>
            <button type="submit" class="btn btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code
{
    private Features.Account.Manage.ChangePassword.Command Model = new();
    private string Success { get; set; }
    private string Error { get; set; }
    private ServerValidator _serverValidator;

    private async Task SubmitChangePassword()
    {
        Error = "";
        Success = "";
        var response = await Http.PostAsJsonAsync("api/account/manage/changepassword", Model);
        var result = await response.Content.ReadFromJsonAsync<Features.Account.Manage.ChangePassword.Result>();

        if (result.IsSuccessful)
        {
            Success = result.Message;
        }
        else
        {
            _serverValidator.DisplayErrors(result.Errors);
            Error = result.Message;
        }
    }

}
