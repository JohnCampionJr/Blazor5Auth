@page "/account/manage/changepassword"
@attribute [Authorize]
@inject HttpClient Http

<TwHeader2>Change Password</TwHeader2>

@if (!string.IsNullOrEmpty(Success))
{
    <TwAlertSuccess>
        @Success
    </TwAlertSuccess>
}
@if (!string.IsNullOrEmpty(Error))
{
    <TwAlertError>
        @Error
    </TwAlertError>
}

<TwSubCard>
    <EditForm Model="Model" OnValidSubmit="SubmitChangePassword">
        <FluentValidationValidator />
        <ServerValidator @ref="_serverValidator" />
        <TwEditContextClasses />

        <TwInputText @bind-Value="@Model.OldPassword"
                     ValidationFor="@(() => Model.OldPassword)"
                     Label="Old Password"
                     type="password" />

        <TwInputText @bind-Value="@Model.NewPassword"
                     ValidationFor="@(() => Model.NewPassword)"
                     Label="Password"
                     type="password" />

        <TwInputText @bind-Value="@Model.ConfirmPassword"
                     ValidationFor="@(() => Model.ConfirmPassword)"
                     Label="Confirm Password"
                     type="password" />

        <TwButton>Update password</TwButton>
    </EditForm>
</TwSubCard>

@code
{
    private Features.Account.Manage.ChangePassword.Command Model = new();
    private string Success { get; set; }
    private string Error { get; set; }
    private ServerValidator _serverValidator;

    private async Task SubmitChangePassword()
    {
        Error = "";
        Success = "";
        var response = await Http.PostAsJsonAsync("api/account/manage/changepassword", Model);
        var result = await response.Content.ReadFromJsonAsync<Features.Account.Manage.ChangePassword.Result>();

        if (result.IsSuccessful)
        {
            Success = result.Message;
        }
        else
        {
            _serverValidator.DisplayErrors(result.Errors);
            Error = result.Message;
        }
    }
}
