@page "/account/manage/twofactorauthentication"
@attribute [Authorize]
@using Features.Account.Manage
@using Features.Base
@inject HttpClient Http

<TwHeader2>Two Factor Authentication</TwHeader2>

@if (!string.IsNullOrEmpty(Success))
{
    <TwAlertSuccess>
        @Success
    </TwAlertSuccess>
}

@if (Model != null)
{
    @if (Model.IsMfaEnabled)
    {
        if (Model.RecoveryCodesLeft == 0)
        {
            <div class="alert alert-danger">
                <strong>You have no recovery codes left.</strong>
                <p>You must <a href="/Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
            </div>
        }
        else if (Model.RecoveryCodesLeft == 1)
        {
            <div class="alert alert-danger">
                <strong>You have 1 recovery code left.</strong>
                <p>You can <a href="/Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }
        else if (Model.RecoveryCodesLeft <= 3)
        {
            <div class="alert alert-warning">
                <strong>You have @Model.RecoveryCodesLeft recovery codes left.</strong>
                <p>You should <a href="/Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }

        if (Model.IsMachineRemembered)
        {
            <a href="#" class="px-3 py-2 mr-1 mt-4 text-white bg-blue-600 rounded-md" @onclick="ForgetBrowser" @onclick:preventDefault>Forget this browser</a>
        }
        <TwButtonLink href="/Account/Manage/DisableMfa">Disable 2FA</TwButtonLink>
        <TwButtonLink href="/Account/Manage/GenerateRecoveryCodes">Reset recovery codes</TwButtonLink>
    }

    <h5 class="my-3">Authenticator app</h5>
    @if (!Model.HasAuthenticator)
    {
        <TwButtonLink id="enable-authenticator" href="/Account/Manage/EnableAuthenticator">Add authenticator app</TwButtonLink>
    }
    else
    {
        <TwButtonLink id="enable-authenticator" href="/Account/Manage/EnableAuthenticator">Setup authenticator app</TwButtonLink>
        <TwButtonLink id="reset-authenticator" href="/Account/Manage/ResetAuthenticator">Reset authenticator app</TwButtonLink>
    }
}

@code {
    private MfaInfo.Result Model;
    private string Success { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await Http.GetFromJsonAsync<MfaInfo.Result>("api/account/manage/mfainfo");
    }

    private async Task ForgetBrowser()
    {
        var response = await Http.PostAsJsonAsync("api/account/manage/mfaforgetbrowser", new { });
        var result = await response.Content.ReadFromJsonAsync<BaseResult>();

        if (result.IsSuccessful)
        {
            Success = result.Message;
        }
    }

}