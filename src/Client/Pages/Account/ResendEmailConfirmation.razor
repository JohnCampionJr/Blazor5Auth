@page "/account/resendemailconfirmation"

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IAuthService AuthService

<TwHeader1>Resend Email Confirmation</TwHeader1>

@if (!string.IsNullOrEmpty(Status))
{
    <TwAlertSuccess>
        @Status
    </TwAlertSuccess>
}
@if (!string.IsNullOrEmpty(Error))
{
    <TwAlertError>
        @Error
    </TwAlertError>
}

<TwCard Class="lg:w-1/2">
    <EditForm Model="Model" OnValidSubmit="SubmitResend">
        <FluentValidationValidator />
        <ServerValidator @ref="serverValidator" />
        <TwEditContextClasses />

        <TwInputText @bind-Value="@Model.Email"
                     ValidationFor="@(() => Model.Email)"
                     type="email"
                     Label="Email" />

        <TwButton>Resend</TwButton>
    </EditForm>
</TwCard>

@code
{
    private Features.Account.ResendEmailConfirmation.Command Model = new();
    private string Status { get; set; }
    private string Error { get; set; }
    private ServerValidator serverValidator;

    private async Task SubmitResend()
    {
        var url = "api/account/resendemailconfirmation";

        var response = await Http.PostAsJsonAsync(url, Model);
        var result = await response.Content.ReadFromJsonAsync<Features.Account.ResendEmailConfirmation.Result>();

        if (result.IsSuccessful)
        {
            Status = result.Message;
        }
        else
        {
            serverValidator.DisplayErrors(result.Errors);
            Error = result.Message;
        }
    }

}
