@page "/account/login"
@using Features.Account
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<TwHeader1 class="border-b-2">Login</TwHeader1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="px-4 py-5 border border-gray-300 rounded lg:w-1/2">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
        Please enter your details
    </h3>
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <FluentValidationValidator />
        <ValidationSummary />

        <TwInputText @bind-Value="@loginModel.Email"
                     ValidationFor="@(() => loginModel.Email)"
                     Label="Email Address"
                     type="email"
                     placeholder="you@example.com" />

        <TwInputText @bind-Value="@loginModel.Password"
                     ValidationFor="@(() => loginModel.Password)"
                     Label="Password"
                     type="password" />

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

<div class="form-group">
    <p>
        <a id="forgot-password" href="/Account/ForgotPassword">Forgot your password?</a>
    </p>
    <p>
        <a href="/Account/Register">Register as a new user</a>
    </p>
    <p>
        <a id="resend-confirmation" href="/Account/ResendEmailConfirmation">Resend email confirmation</a>
    </p>
</div>


@code {

    private LoginPassword.Command loginModel = new LoginPassword.Command();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.IsSuccessful)
        {
            NavigationManager.NavigateToReturnUrl("/");
        }
        else if (result.RequiresTwoFactor)
        {
            NavigationManager.NavigateWithExistingReturnUrl("/Account/LoginWith2fa");
        }
        else if (result.RequiresEmailConfirmation)
        {
            NavigationManager.NavigateWithExistingReturnUrl("/Account/ResendEmailConfirmation");
        }
        else if (result.IsLockedOut)
        {
            NavigationManager.NavigateTo("/Account/Lockout");
        }
        else
        {
            Error = result.Message;
            ShowErrors = true;
        }
    }

}