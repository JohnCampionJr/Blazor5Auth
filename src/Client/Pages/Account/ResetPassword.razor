@page "/account/resetpassword"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IAuthService AuthService

<h4>Reset Password</h4>
@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @Error
    </div>
}
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Model" OnValidSubmit="SubmitResetPassword">
            <FluentValidationValidator />
            <ServerValidator @ref="serverValidator" />
            <ValidationSummary />
            <div class="form-group">
                <label for="newpassword">New Password</label>
                <InputText Id="newpassword" type="password" class="form-control" @bind-Value="Model.NewPassword"/>
                <ValidationMessage For="@(() => Model.NewPassword)"/>
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword"/>
                <ValidationMessage For="@(() => Model.ConfirmPassword)"/>
            </div>
            <button type="submit" class="btn btn-primary">Reset password</button>
        </EditForm>
    </div>
</div>

@code
{
    public Features.Account.ResetPassword.Command Model = new();
    private string Error { get; set; }
    private ServerValidator serverValidator;

    protected override void OnInitialized()
    {
        NavigationManager.TryGetQueryString<string>("code", out var code);
        NavigationManager.TryGetQueryString<string>("email", out var email);
        if (code == null || email == null)
        {
            NavigationManager.NavigateTo("/");
        }

        Model.Email = email;
        Model.Code = code;
    }

    protected async Task SubmitResetPassword()
    {
        var url = "api/account/resetpassword";

        var response = await Http.PostAsJsonAsync(url, Model);
        var result = await response.Content.ReadFromJsonAsync<Features.Account.ResetPassword.Result>();

        if (result.IsSuccessful) {
            NavigationManager.NavigateTo("/Account/ResetPasswordConfirmation");
        }
        else
        {
            Error = result.Message;
        }
    }

}
