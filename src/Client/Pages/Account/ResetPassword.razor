@page "/account/resetpassword"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IAuthService AuthService

<TwHeader1>Reset Password</TwHeader1>

@if (!string.IsNullOrEmpty(Error))
{
    <TwAlertError>
        @Error
    </TwAlertError>
}

<TwCard Class="lg:w-1/2">
    <EditForm Model="Model" OnValidSubmit="SubmitResetPassword">
        <FluentValidationValidator />
        <ServerValidator @ref="serverValidator" />
        <TwEditContextClasses />

        <TwInputText @bind-Value="@Model.NewPassword"
                     ValidationFor="@(() => Model.NewPassword)"
                     type="password"
                     Label="New Password" />

        <TwInputText @bind-Value="@Model.ConfirmPassword"
                     ValidationFor="@(() => Model.ConfirmPassword)"
                     type="password"
                     Label="Confirm Password" />

        <TwButton>Reset Password</TwButton>
    </EditForm>
</TwCard>

@code
{
    public Features.Account.ResetPassword.Command Model = new();
    private string Error { get; set; }
    private ServerValidator serverValidator;

    protected override void OnInitialized()
    {
        NavigationManager.TryGetQueryString<string>("code", out var code);
        NavigationManager.TryGetQueryString<string>("email", out var email);
        if (code == null || email == null)
        {
            NavigationManager.NavigateTo("/");
        }

        Model.Email = email;
        Model.Code = code;
    }

    protected async Task SubmitResetPassword()
    {
        var url = "api/account/resetpassword";

        var response = await Http.PostAsJsonAsync(url, Model);
        var result = await response.Content.ReadFromJsonAsync<Features.Account.ResetPassword.Result>();

        if (result.IsSuccessful)
        {
            NavigationManager.NavigateTo("/Account/ResetPasswordConfirmation");
        }
        else
        {
            Error = result.Message;
        }
    }
}
