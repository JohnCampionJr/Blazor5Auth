@page "/account/loginwithrecoverycode"
@using Features.Account
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<TwHeader1>Recovery code verification</TwHeader1>

@if (!string.IsNullOrEmpty(Error))
{
    <TwAlertError>
        @Error
    </TwAlertError>
}

<p>
    You have requested to log in with a recovery code. This login will not be remembered until you provide
    an authenticator app code at log in or disable 2FA and log in again.
</p>

<TwCard Class="lg:w-1/2">
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <FluentValidationValidator />
        <TwEditContextClasses />

        <TwInputText @bind-Value="@loginModel.RecoveryCode"
                     ValidationFor="@(() => loginModel.RecoveryCode)"
                     Label="Recovery Code" />

        <TwButton>Submit</TwButton>
    </EditForm>
</TwCard>

@code
{
    private LoginRecoveryCode.Command loginModel = new();
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthService.CheckMfa();
        if (!result.IsSuccessful) NavigationManager.NavigateWithExistingReturnUrl("/Account/Login");
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.LoginRecoveryCode(loginModel);

        if (result.IsSuccessful)
        {
            NavigationManager.NavigateToReturnUrl("/");
        }
        else
        {
            Error = result.Message;
        }
    }
}
