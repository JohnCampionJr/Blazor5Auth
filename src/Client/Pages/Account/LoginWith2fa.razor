@page "/account/loginwith2fa"
@using Features.Account
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<TwHeader1>Two-factor authentication</TwHeader1>

@if (!string.IsNullOrEmpty(Error))
{
    <TwAlertError>
        @Error
    </TwAlertError>
}

<p>Your login is protected with an authenticator app. Enter your authenticator code below.</p>

<TwCard Title="Please enter your details" Class="lg:w-1/2">
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <FluentValidationValidator />
        <TwEditContextClasses />

        <TwInputText @bind-Value="@loginModel.TwoFactorCode"
                     ValidationFor="@(() => loginModel.TwoFactorCode)"
                     Label="Verification Code" />

        <TwInputCheckbox @bind-Value="@loginModel.RememberMachine" Id="remembermachine"
                     Label="Remember this machine" />

        <TwButton>Submit</TwButton>
    </EditForm>
    <div class="bg-gray-50 mt-4 px-4 py-4 sm:px-6">
        Don't have access to your authenticator device? You can
        <a href="#" class="text-blue-500" @onclick="GoToRecovery" @onclick:preventDefault>log in with a recovery code</a>.
    </div>
</TwCard>

@code
{
    private LoginMultiFactor.Command loginModel = new();
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthService.CheckMfa();
        if (!result.IsSuccessful) NavigationManager.NavigateWithExistingReturnUrl("/Account/Login");
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.LoginMfa(loginModel);

        if (result.IsSuccessful)
        {
            NavigationManager.NavigateToReturnUrl("/");
        }
        else
        {
            Error = result.Message;
        }
    }

    private void GoToRecovery()
    {
        NavigationManager.NavigateWithExistingReturnUrl("/Account/LoginWithRecoveryCode");
    }
}
